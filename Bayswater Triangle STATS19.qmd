---
title: "STATS19"
---

<!-- https://a58improvements.commonplace.is/ -->

# Introduction

This practical workbook guides you through the process of importing, processing and visualising STATS19 data using R with reference to a real-world case study: changes to the A58 in Leeds.
Roundhay Road is a major road which runs from central Leeds to Rounday Park in the North of the city.
The changes focus on the southern part of Roundhay Road around its intersections with Bayswater Road and Spencer Place, as highlighted in the [consultation "Have Your Say Today - A58 Improvements - Commonplace"](https://a58improvements.commonplace.is/) and [illustrated](https://a58improvements.commonplace.is/en-GB/proposals/v3/proposals-and-survey?step=step1) in @fig-overview.

![Overview of changes to the southern section of Roundhay road proposed by Connecting Leeds in 2025. Credit: Leeds City Council.](images/paste-1.png){#fig-overview}

# Setup and prerequisites

We will use packages listed in the following code chunk to reproduce the analysis.
Run the code chunk below to install and load the required packages.

```{r}
#| label: packages
#| message: false

options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require("remotes")) install.packages("remotes")
pkgs = c(
    "sf",
    "tidyverse",
    "tmap",
    "data.table",
    "stats19"
)

remotes::install_cran(pkgs)
sapply(pkgs, require, character.only = TRUE)
```

# Results presented in the consultation

[Step 4 of the consultation](https://a58improvements.commonplace.is/en-GB/proposals/v3/proposals-and-survey?step=step4) contains the map presented in @fig-collisions-consultation.

![Map of collisions in the study area. Credit: Leeds City Council](images/paste-2.png){#fig-collisions-consultation}

Let's try to reproduce the map.

# Defining study area

There are different ways to define the study area.
We could manually look it up but geocoding may be a better approach.
Looking at the area on Google Maps shows that Cross Roseville Road is roughly in the centre of the study area.


```{r}
case_study_coords = stplanr::geo_code("Cross Roseville Road, Leeds")
```

That gives us the coordinates we need, which could also be obtained using other geocoding services or added manually as follows:

```{r}
#| eval: false
#| echo: false
dput(case_study_coords)
```

```{r}
#| eval: false
case_study_coords = c(-1.5243862, 53.8109931)
```

Converting the coordinates to a spatial object (a Point)

```{r}
my_study_point <- st_point(case_study_coords)
my_study_point
```

Now let's transform the point into something meaningful with a defined CRS

```{r}
sfc_point <- my_study_point |> st_sfc(crs = 4326)
```

Let's visualise the location of the point

```{r}
tmap_mode("view") # for interactive visualisation

tm_shape(sfc_point)+
  tm_dots()

```

Let's define a buffer around our point

```{r}
study_buffer <- sfc_point |>
  st_buffer(dist = 200)

tm_shape(study_buffer)+
  tm_fill("gray80",fill_alpha = 0.8)+
  tm_shape(sfc_point)+
  tm_dots()
```

```{r}
collision_data <- lapply(2019:2024,
                         get_stats19,
                         type = "collision",
                         silent = TRUE,
                         output_format = "sf") |> 
  bind_rows()
```

An inspection of the data

```{r}
names(collision_data)
```

Let's reconcile some data to match the appropriate convention

```{r}
collision_data <- collision_data |> 
  mutate(collision_year = coalesce(collision_year,accident_year),
         legacy_collision_severity = coalesce(legacy_collision_severity,accident_severity))
```

Let's visualise all the data we extracted

```{r}
collision_data |>
  slice_sample(n = 5000) |>
  st_geometry() |> 
  tm_shape()+
  tm_dots()
```

Creating a subset of the collisions within our study area

```{r}
st_crs(collision_data,)
st_crs(study_buffer)
```

Let's transform the buffer to match the British Grid

```{r}
study_buffer_BNG <- study_buffer |> st_transform(st_crs(collision_data))
```

```{r}
study_collisions <- collision_data[study_buffer_BNG,]
```

A quick exploration of the amount

```{r}
study_collisions |>
  count(legacy_collision_severity)
```

A quick visualisation

```{r}
study_collisions |>
tm_shape()+
  tm_dots(fill = "legacy_collision_severity",
          size = 1,
          fill_alpha = 0.7,
          fill.scale = tm_scale_categorical(
            labels = c("Slight","Serious"),
            values = c("orange","dodgerblue")))
```

A better version

```{r}
study_collisions |>
  mutate(legacy_collision_severity = factor(legacy_collision_severity,
                                            c("Slight","Serious","Fatal"),
                                            ordered = T)) |>
  arrange(legacy_collision_severity) |> 
  mutate(X = st_coordinates(geometry)[,1],
         Y = st_coordinates(geometry)[,2]) |> 
  ggplot(aes(x = X,y = Y,col = legacy_collision_severity))+
  geom_jitter(alpha = 0.8,
              size = 2,
              position = position_jitter(width = 5, height = 5))+
  theme_void()+
  scale_color_manual(values = c("dodgerblue","orange","red"))+
  theme(plot.background = element_rect(fill = "gray20"))
```